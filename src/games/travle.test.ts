import { GameScore } from "../baseGame";
import { runGameTests } from "../util/testUtils";
import { Travle } from "./travle";

const sampleWins = [
  `
#travle #508 +0 (Perfect)
âœ…âœ…âœ…âœ…âœ…âœ…
`,
  `
#travle #508 +0
ðŸŸ©âœ…ðŸŸ©âœ…ðŸŸ©âœ…
`,
  `
#travle #508 +5
âœ…ðŸŸ§âœ…ðŸŸ©âœ…ðŸŸ§âœ…ðŸŸ§ðŸŸ§ðŸŸ§âœ…
`,
  `
#travle #508 +0 (3 hints)
âœ…âœ…âœ…âœ…âœ…âœ…
`,
];

const sampleLosses = [
  `
#travle #508 (2 away)
ðŸŸ¥ðŸŸ¥ðŸŸ§ðŸŸ¥ðŸŸ¥ðŸŸ©âœ…âœ…ðŸŸ§ðŸŸ§ðŸŸ©
`,
  `
#travle #508 (2 away) (1 hint)
ðŸŸ©ðŸŸ§ðŸŸ§ðŸŸ©âœ…ðŸŸ§ðŸŸ§ðŸŸ©ðŸŸ§ðŸŸ§ðŸŸ§
`,
];

const sampleNearWin = `
#travle #508 (1 away)
ðŸŸ§ðŸŸ©ðŸŸ§ðŸŸ©ðŸŸ©âœ…âœ…ðŸŸ§ðŸŸ§ðŸŸ§ðŸŸ§
`;

describe("Travle", () => {
  runGameTests(new Travle(), [
    ...sampleWins.map((input, idx) => ({
      name: `sampleWin${idx}`,
      input,
      expectedScore: GameScore.Win,
    })),
    ...sampleLosses.map((input, idx) => ({
      name: `sampleLoss${idx}`,
      input,
      expectedScore: GameScore.Loss,
    })),
    {
      name: "sampleNearWin",
      input: sampleNearWin,
      expectedScore: GameScore.NearWin,
    },
  ]);
});
